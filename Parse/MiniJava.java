/* MiniJava.java */
/* Generated By:JavaCC: Do not edit this line. MiniJava.java */
package Parse;
import java.util.LinkedList;
public class MiniJava implements MiniJavaConstants {

/********************/
/* MiniJava Grammar */
/********************/

// Goal 	::= 	MainClass ( ClassDeclaration | ThreadDeclaration )* <EOF>
  final public Absyn.Program Goal() throws ParseException {LinkedList<Absyn.ClassDecl> cl = new LinkedList<Absyn.ClassDecl>();
    MainClassDeclaration(cl);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 6:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2147483647)) {
        ClassDeclaration(cl);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 6:{
          ThreadDeclaration(cl);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
{if ("" != null) return new Absyn.Program(cl);}
    throw new Error("Missing return statement in function");
}

// MainClass 	::= 	"class" Identifier "{" "public" "static" "void" "main" "(" "String" "[" "]" Identifier ")" "{" Statement "}" "}"
  final public Absyn.ClassDecl MainClassDeclaration(LinkedList<Absyn.ClassDecl> cl) throws ParseException {Absyn.ClassDecl  cd;
 Absyn.Stmt stmt;
 Absyn.VarDecl var;
 Token name, arg;
 LinkedList<Absyn.MethodDecl> methods = new LinkedList<Absyn.MethodDecl>();
 LinkedList<Absyn.Formal> formals     = new LinkedList<Absyn.Formal>();
 LinkedList<Absyn.VarDecl> locals     = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.Stmt> stmts         = new LinkedList<Absyn.Stmt>();
    jj_consume_token(6);
    name = jj_consume_token(ID);
    jj_consume_token(35);
    jj_consume_token(11);
    jj_consume_token(12);
    jj_consume_token(13);
    jj_consume_token(17);
    jj_consume_token(33);
    jj_consume_token(18);
    jj_consume_token(37);
    jj_consume_token(38);
    arg = jj_consume_token(ID);
    jj_consume_token(34);
formals.add(new Absyn.Formal(
   new Absyn.ArrayType(
    new Absyn.IdentifierType("String")),
     arg.toString()));
    jj_consume_token(35);
    label_2:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_2;
      }
      var = VarDeclaration();
locals.add(var);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 8:
      case 9:
      case 19:
      case 20:
      case 33:
      case 35:
      case DECIMAL:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      stmt = Statement();
stmts.add(stmt);
    }
    jj_consume_token(36);
    jj_consume_token(36);
methods.add(new Absyn.MethodDecl(null,
               false,
               "main",
               formals,
               locals,
               stmts,
        new Absyn.IntegerLiteral(0)));
  cd = new Absyn.ClassDecl(
   name.toString(),
   null,
   locals,
   methods);
  cl.add(cd);
  {if ("" != null) return cd;}
    throw new Error("Missing return statement in function");
}

// ClassDeclaration 	::= 	"class" Identifier ( "extends" Identifier )? "{" ( VarDeclaration )* ( MethodDeclaration )* "}"
  final public Absyn.ClassDecl ClassDeclaration(LinkedList<Absyn.ClassDecl> cl) throws ParseException {Absyn.ClassDecl  cd;
 Absyn.MethodDecl md;
 Absyn.VoidDecl   vd;
 Absyn.VarDecl    fd;
 Token name = null, parent = null;
 String parStr = null;
 LinkedList<Absyn.VarDecl> fields     = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.MethodDecl> methods = new LinkedList<Absyn.MethodDecl>();
    jj_consume_token(6);
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 69:{
      jj_consume_token(69);
      parent = jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(35);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 13:
      case 14:
      case 15:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      fd = VarDeclaration();
fields.add(fd);
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 11:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      md = MethodDeclaration();
methods.add(md);
    }
    jj_consume_token(36);
cd = new Absyn.ClassDecl(name.toString(), parent != null ? parent.toString() : null, fields, methods);
        cl.add(cd);
        {if ("" != null) return cd;}
    throw new Error("Missing return statement in function");
}

// ThreadDeclaration 	::= 	"class" Identifier "extends" "Thread" "{" ( VarDeclaration )* ( MethodDeclaration | RunDeclaration )* "}"
  final public Absyn.ThreadDecl ThreadDeclaration(LinkedList<Absyn.ClassDecl> cl) throws ParseException {Absyn.ThreadDecl cd;
 Absyn.MethodDecl md;
 Absyn.VoidDecl   vd;
 Absyn.VarDecl    fd;
 Token name = null;
 String parStr = null;
 LinkedList<Absyn.VarDecl> fields     = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.MethodDecl> methods = new LinkedList<Absyn.MethodDecl>();
    jj_consume_token(6);
    name = jj_consume_token(ID);
    jj_consume_token(69);
    jj_consume_token(70);
    jj_consume_token(35);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 11:
      case 13:
      case 14:
      case 15:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      if (jj_2_3(2147483647)) {
        fd = FieldDeclaration();
fields.add(fd);
      } else if (jj_2_4(2)) {
        vd = VoidDeclaration();
methods.add(vd);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 11:{
          md = MethodDeclaration();
methods.add(md);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(36);
cd = new Absyn.ThreadDecl(name.toString(),
    fields, methods);
  cl.add(cd);
  {if ("" != null) return cd;}
    throw new Error("Missing return statement in function");
}

// VarDeclaration 	::= 	Type Identifier ( = Expression )? ";"
  final public Absyn.VarDecl VarDeclaration() throws ParseException {Absyn.Type type = null;
 Token      name = null;
 Absyn.Expr init = null;
    type = Type();
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 31:{
      jj_consume_token(31);
      init = Expression();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(39);
{if ("" != null) return new Absyn.VarDecl(type, name.toString(), init);}
    throw new Error("Missing return statement in function");
}

// MethodDeclaration 	::= 	"public" ( "synchronized" )? Type Identifier "(" ( Type Identifier ( "," Type Identifier )* )? ")" "{" ( VarDeclaration )* ( Statement )* "return" Expression ";" "}"
  final public Absyn.MethodDecl MethodDeclaration() throws ParseException {Absyn.Type returnType, paramType;
 Token methodName, paramName;
//	Absyn.Formal formal;
 Absyn.VarDecl var;
 Absyn.Stmt stmt;
 Absyn.Expr expr;
 boolean sync = false;
 LinkedList<Absyn.Formal> formals  = new LinkedList<Absyn.Formal>();
 LinkedList<Absyn.VarDecl> locals  = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.Stmt> stmts      = new LinkedList<Absyn.Stmt>();
    jj_consume_token(11);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 71:{
      jj_consume_token(71);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    returnType = Type();
    methodName = jj_consume_token(ID);
    jj_consume_token(33);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 13:
    case 14:
    case 15:
    case ID:{
      paramType = Type();
      paramName = jj_consume_token(ID);
formals.add(new Absyn.Formal(paramType, paramName.toString()));
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 40:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        jj_consume_token(40);
        paramType = Type();
        paramName = jj_consume_token(ID);
formals.add(new Absyn.Formal(paramType, paramName.toString()));
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(34);
    jj_consume_token(35);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 13:
      case 14:
      case 15:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      var = VarDeclaration();
locals.add(var);
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 8:
      case 9:
      case 19:
      case 20:
      case 33:
      case 35:
      case DECIMAL:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_9;
      }
      stmt = Statement();
stmts.add(stmt);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 10:{
      jj_consume_token(10);
      expr = Expression();
      jj_consume_token(39);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
if((expr = Expression())  == null){
  expr = new Absyn.NullExpr();
 }
    jj_consume_token(36);
{if ("" != null) return new Absyn.MethodDecl(returnType, sync ,methodName.toString(), formals, locals, stmts, expr);}
    throw new Error("Missing return statement in function");
}

// VoidDeclaration 	::= 	"public" "void" Identifier "(" ( Type Identifier ( "," Type Identifier )* )? ")" "{" ( VarDeclaration )* ( Statement )* "}"
  final public Absyn.VoidDecl VoidDeclaration() throws ParseException {Token methodName;
 Absyn.VarDecl var;
 Absyn.Stmt stmt;
 LinkedList<Absyn.VarDecl> locals  = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.Stmt> stmts      = new LinkedList<Absyn.Stmt>();
    jj_consume_token(11);
    jj_consume_token(13);
    methodName = jj_consume_token(ID);
    jj_consume_token(33);
    jj_consume_token(34);
    jj_consume_token(35);
    label_10:
    while (true) {
      if (jj_2_5(2147483647)) {
        ;
      } else {
        break label_10;
      }
      var = VarDeclaration();
locals.add(var);
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 8:
      case 9:
      case 19:
      case 20:
      case 33:
      case 35:
      case DECIMAL:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_11;
      }
      stmt = Statement();
stmts.add(stmt);
    }
    jj_consume_token(36);
{if ("" != null) return new Absyn.VoidDecl(methodName.toString(), locals, stmts);}
    throw new Error("Missing return statement in function");
}

// FieldDeclaration 	::= 	Type Identifier ";"
  final public Absyn.VarDecl FieldDeclaration() throws ParseException {Absyn.Type type;
 Token name;
    type = Type();
    name = jj_consume_token(ID);
    jj_consume_token(39);
{if ("" != null) return new Absyn.VarDecl(type, name.toString(), new Absyn.IntegerLiteral(0));}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Stmt Statement() throws ParseException {Absyn.Stmt s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 35:{
      s = Block();
      break;
      }
    case 8:{
      s = IfStatement();
      break;
      }
    case 9:{
      s = WhileStatement();
      break;
      }
    case 19:
    case 20:
    case 33:
    case DECIMAL:
    case ID:{
      s = AssignmentStatement();
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Absyn.Stmt AssignmentStatement() throws ParseException {Absyn.Expr lhs, rhs;
    lhs = Expression();
    //lhs should call assignableExpr.
     rhs = Expression();
{if ("" != null) return new Absyn.AssignStmt(lhs,rhs);}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Stmt IfStatement() throws ParseException {Absyn.Expr cond;
    Absyn.Stmt thenStmt, elseStmt = null;
    jj_consume_token(8);
    jj_consume_token(33);
    cond = Expression();
    jj_consume_token(34);
    thenStmt = Statement();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 7:{
      jj_consume_token(7);
      elseStmt = Statement();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
{if ("" != null) return new Absyn.IfStmt(cond, thenStmt, elseStmt);}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Type Type() throws ParseException {Absyn.Type t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 15:{
      jj_consume_token(15);
t = new Absyn.IntegerType(); {if ("" != null) return t;}
      break;
      }
    case 14:{
      jj_consume_token(14);
t = new Absyn.BooleanType(); {if ("" != null) return t;}
      break;
      }
    case 13:{
      jj_consume_token(13);
t = null;
      break;
      }
    case ID:{
      jj_consume_token(ID);
t = new Absyn.IdentifierType(token.image); {if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Absyn.Expr PrimaryExpression() throws ParseException {Absyn.Expr e;
 Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:
    case 20:
    case DECIMAL:{
      e = Literal();
      break;
      }
    case ID:{
      id = jj_consume_token(ID);
e = new Absyn.IdentifierExpr(id.image);
      break;
      }
    case 33:{
      jj_consume_token(33);
      e = Expression();
      jj_consume_token(34);
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Absyn.Expr Expression() throws ParseException {Absyn.Expr e, right;
    Token op;
    e = PrimaryExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 72:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_12;
      }
      op = BinaryOperator();
      right = PrimaryExpression();
e = new Absyn.BinOpExpr(e, right);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Expr Literal() throws ParseException {Absyn.Expr e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECIMAL:{
      e = IntegerLiteral();
      break;
      }
    case 19:{
      jj_consume_token(19);
e = new Absyn.TrueExpr();
      break;
      }
    case 20:{
      jj_consume_token(20);
e = new Absyn.FalseExpr();
{if ("" != null) return e;}  // Ensure you return the constructed expression

      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Absyn.Expr IntegerLiteral() throws ParseException {Token decimalToken;  // Capture the token for decimal literals

    decimalToken = jj_consume_token(DECIMAL);
{if ("" != null) return new Absyn.IntegerLiteral(Integer.parseInt(decimalToken.image));}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Stmt Block() throws ParseException {LinkedList<Absyn.Stmt> stmts = new LinkedList<Absyn.Stmt>();
    Absyn.Stmt stmt;
    jj_consume_token(35);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 8:
      case 9:
      case 19:
      case 20:
      case 33:
      case 35:
      case DECIMAL:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_13;
      }
      stmt = Statement();
stmts.add(stmt);
    }
    jj_consume_token(36);
{if ("" != null) return new Absyn.BlockStmt(stmts);}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Stmt WhileStatement() throws ParseException {Absyn.Expr cond;
    Absyn.Stmt body;
    jj_consume_token(9);
    jj_consume_token(33);
    cond = Expression();
    jj_consume_token(34);
    body = Statement();
{if ("" != null) return new Absyn.WhileStmt(cond, body);}
    throw new Error("Missing return statement in function");
}

  final public Token BinaryOperator() throws ParseException {Token t;
    t = jj_consume_token(72);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Expr BinaryOperation() throws ParseException {Absyn.Expr left, right;
    Token op;
    left = Expression();
    op = BinaryOperator();
    right = Expression();
{if ("" != null) return new Absyn.BinOpExpr(left, right);}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_3R_FieldDeclaration_356_2_16()) return true;
    return false;
  }

  private boolean jj_3R_Statement_372_5_44()
 {
    if (jj_3R_AssignmentStatement_382_2_49()) return true;
    return false;
  }

  private boolean jj_3R_Statement_371_5_43()
 {
    if (jj_3R_WhileStatement_483_5_48()) return true;
    return false;
  }

  private boolean jj_3R_Statement_370_5_42()
 {
    if (jj_3R_IfStatement_397_5_47()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_VoidDeclaration_340_2_17()) return true;
    return false;
  }

  private boolean jj_3R_Statement_369_2_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_369_2_41()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_370_5_42()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_371_5_43()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_372_5_44()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Statement_369_2_41()
 {
    if (jj_3R_Block_471_5_46()) return true;
    return false;
  }

  private boolean jj_3R_IntegerLiteral_458_5_55()
 {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_VarDeclaration_289_2_15()) return true;
    return false;
  }

  private boolean jj_3R_FieldDeclaration_356_2_16()
 {
    if (jj_3R_Type_408_5_21()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_Literal_446_5_52()
 {
    if (jj_scan_token(20)) return true;
    return false;
  }

  private boolean jj_3R_Literal_445_6_51()
 {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_Literal_444_5_50()
 {
    if (jj_3R_IntegerLiteral_458_5_55()) return true;
    return false;
  }

  private boolean jj_3R_Literal_444_5_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Literal_444_5_50()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_445_6_51()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_446_5_52()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_ClassDeclaration_247_7_20()
 {
    if (jj_3R_MethodDeclaration_309_2_23()) return true;
    return false;
  }

  private boolean jj_3R_ClassDeclaration_246_7_19()
 {
    if (jj_3R_VarDeclaration_289_2_15()) return true;
    return false;
  }

  private boolean jj_3R_ClassDeclaration_244_7_18()
 {
    if (jj_scan_token(69)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_Expression_434_7_34()
 {
    if (jj_3R_BinaryOperator_493_5_40()) return true;
    if (jj_3R_PrimaryExpression_421_5_33()) return true;
    return false;
  }

  private boolean jj_3R_Expression_433_5_28()
 {
    if (jj_3R_PrimaryExpression_421_5_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Expression_434_7_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_VoidDeclaration_340_2_17()
 {
    if (jj_scan_token(11)) return true;
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_ClassDeclaration_243_2_14()
 {
    if (jj_scan_token(6)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassDeclaration_244_7_18()) jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ClassDeclaration_246_7_19()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ClassDeclaration_247_7_20()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_423_5_39()
 {
    if (jj_scan_token(33)) return true;
    if (jj_3R_Expression_433_5_28()) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_422_5_38()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_421_5_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryExpression_421_5_37()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_422_5_38()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_423_5_39()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_PrimaryExpression_421_5_37()
 {
    if (jj_3R_Literal_444_5_45()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_317_7_31()
 {
    if (jj_3R_Statement_369_2_36()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_318_6_32()
 {
    if (jj_scan_token(10)) return true;
    if (jj_3R_Expression_433_5_28()) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_316_7_30()
 {
    if (jj_3R_VarDeclaration_289_2_15()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_313_9_35()
 {
    if (jj_scan_token(40)) return true;
    if (jj_3R_Type_408_5_21()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_Type_411_5_27()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_Type_410_5_26()
 {
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_VarDeclaration_289_30_22()
 {
    if (jj_scan_token(31)) return true;
    if (jj_3R_Expression_433_5_28()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_312_7_29()
 {
    if (jj_3R_Type_408_5_21()) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MethodDeclaration_313_9_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Type_409_5_25()
 {
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_VarDeclaration_289_2_15()) return true;
    return false;
  }

  private boolean jj_3R_Type_408_5_24()
 {
    if (jj_scan_token(15)) return true;
    return false;
  }

  private boolean jj_3R_Type_408_5_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Type_408_5_24()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_409_5_25()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_410_5_26()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_411_5_27()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_IfStatement_399_7_54()
 {
    if (jj_scan_token(7)) return true;
    if (jj_3R_Statement_369_2_36()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_309_2_23()
 {
    if (jj_scan_token(11)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_3R_Type_408_5_21()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(33)) return true;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_312_7_29()) jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    if (jj_scan_token(35)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MethodDeclaration_316_7_30()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MethodDeclaration_317_7_31()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_318_6_32()) jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_BinaryOperator_493_5_40()
 {
    if (jj_scan_token(72)) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_397_5_47()
 {
    if (jj_scan_token(8)) return true;
    if (jj_scan_token(33)) return true;
    if (jj_3R_Expression_433_5_28()) return true;
    if (jj_scan_token(34)) return true;
    if (jj_3R_Statement_369_2_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IfStatement_399_7_54()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_WhileStatement_483_5_48()
 {
    if (jj_scan_token(9)) return true;
    if (jj_scan_token(33)) return true;
    if (jj_3R_Expression_433_5_28()) return true;
    if (jj_scan_token(34)) return true;
    if (jj_3R_Statement_369_2_36()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_ClassDeclaration_243_2_14()) return true;
    return false;
  }

  private boolean jj_3R_VarDeclaration_289_2_15()
 {
    if (jj_3R_Type_408_5_21()) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VarDeclaration_289_30_22()) jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_AssignmentStatement_382_2_49()
 {
    if (jj_3R_Expression_433_5_28()) return true;
    if (jj_3R_Expression_433_5_28()) return true;
    return false;
  }

  private boolean jj_3R_Block_472_6_53()
 {
    if (jj_3R_Statement_369_2_36()) return true;
    return false;
  }

  private boolean jj_3R_Block_471_5_46()
 {
    if (jj_scan_token(35)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Block_472_6_53()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(36)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniJavaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x40,0x40,0x180300,0x0,0xe000,0x800,0xe800,0x800,0x80000000,0x0,0x0,0xe000,0xe000,0x180300,0x400,0x180300,0x180300,0x80,0xe000,0x180000,0x0,0x180000,0x180300,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x2000000a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x2000000a,0x0,0x2000000a,0x2000000a,0x0,0x0,0x20000002,0x0,0x20000000,0x2000000a,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x2,0x20,0x2,0x0,0x2,0x0,0x0,0x80,0x0,0x2,0x2,0x2,0x0,0x2,0x2,0x0,0x2,0x2,0x100,0x0,0x2,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJava(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJava(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniJavaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJava(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MiniJavaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniJavaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJava(MiniJavaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[73];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 23; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 73; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 5; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

                      }
