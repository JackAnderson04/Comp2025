/* MiniJavaParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MiniJavaParserTokenManager.java */
package Parse;
import java.util.LinkedList;

/** Token Manager. */
@SuppressWarnings ("unused")
public class MiniJavaParserTokenManager implements MiniJavaParserConstants {
    boolean anyErrors = false;
    void error(String msg)
 {
         anyErrors = true;
         System.err.println(msg + ": line " + input_stream.getEndLine()
                           + ", column " + input_stream.getEndColumn());
     }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfff00000ffffc0L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 67;
            return 20;
         }
         if ((active0 & 0x500000008000000L) != 0L)
            return 2;
         if ((active0 & 0x7f0000000L) != 0L)
            return 8;
         return -1;
      case 1:
         if ((active0 & 0x400000000000000L) != 0L)
            return 0;
         if ((active0 & 0xfff00000fffbc0L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
            return 20;
         }
         if ((active0 & 0x400L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0xfff00000f77bc0L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0x88000L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0xfff000005472c0L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active0 & 0xa30900L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0x506280L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0xfff00000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x41040L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0x104000L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0xfff00000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x402280L) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
            return 20;
         }
         if ((active0 & 0xfff00000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x104000L) != 0L)
            return 20;
         return -1;
      case 7:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
            return 20;
         }
         if ((active0 & 0xfff00000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 8;
            return 20;
         }
         if ((active0 & 0xfff00000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active1 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 9;
            }
            return 20;
         }
         if ((active0 & 0xfbf00000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0xfae00000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 10;
            return 20;
         }
         return -1;
      case 11:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 11;
            return 20;
         }
         if ((active0 & 0xb8e00000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x18400000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 35);
      case 41:
         return jjStopAtPos(0, 36);
      case 42:
         return jjStopAtPos(0, 26);
      case 43:
         return jjStopAtPos(0, 24);
      case 44:
         return jjStopAtPos(0, 42);
      case 45:
         return jjStopAtPos(0, 25);
      case 46:
         return jjStopAtPos(0, 43);
      case 47:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x500000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 41);
      case 60:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 61:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 62:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0xfff00000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 39);
      case 93:
         return jjStopAtPos(0, 40);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4800L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80400L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x808000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x30000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 37);
      case 125:
         return jjStopAtPos(0, 38);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 0);
         break;
      case 47:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 61:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40100L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000L, active1, 0L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 20);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x11000L, active1, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xfff00000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x840L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800080L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x240L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x211100L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x840000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xfff00000000000L, active1, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 119:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 20);
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 20);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x101080L, active1, 0L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 20);
         break;
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x40040L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xfff00000002000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa5_0(active0, 0xfff00000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 20);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x280L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x404000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0L);
      case 99:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 20);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 20);
         break;
      case 100:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      case 103:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 20);
         break;
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 20);
         break;
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x700000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40800000000000L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0xbb000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x78800000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 20);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x700000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 20);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4700000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x38000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x2700000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(8, 50);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x22000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10800000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(9, 48);
         break;
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x600000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(10, 54);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0x100L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20400000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(10, 49);
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x80800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(11, 55);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 67, 20);
         break;
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(11, 45);
         return jjMoveStringLiteralDfa12_0(active0, 0x10400000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(11, 47);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(11, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(12, 46);
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(13, 51);
         break;
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(13, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  else if ((0x5000ac0000000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  else if (curChar == 33)
                     { jjCheckNAdd(8); }
                  else if (curChar == 61)
                     { jjCheckNAdd(8); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 62)
                     { jjCheckNAdd(8); }
                  else if (curChar == 60)
                     { jjCheckNAdd(8); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 7:
                  if ((0x5000ac0000000000L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 8:
                  if (curChar == 61 && kind > 73)
                     kind = 73;
                  break;
               case 9:
                  if (curChar == 61)
                     { jjCheckNAdd(8); }
                  break;
               case 10:
                  if (curChar == 33)
                     { jjCheckNAdd(8); }
                  break;
               case 11:
                  if (curChar == 60)
                     { jjCheckNAdd(8); }
                  break;
               case 12:
                  if (curChar == 62)
                     { jjCheckNAdd(8); }
                  break;
               case 13:
                  if (curChar != 48)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 14:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAdd(14); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  { jjCheckNAdd(20); }
                  break;
               case 1:
                  if (kind > 57)
                     kind = 57;
                  break;
               case 15:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAdd(16); }
                  break;
               case 17:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  { jjCheckNAdd(20); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 57)
                     kind = 57;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x2000000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 59)
                     kind = 59;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x1000000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\143\154\141\163\163", 
"\160\165\142\154\151\143", "\155\141\151\156", "\163\164\141\164\151\143", "\151\146", 
"\145\154\163\145", "\167\150\151\154\145", "\162\145\164\165\162\156", 
"\145\170\164\145\156\144\163", "\156\145\167", "\164\150\151\163", "\164\162\165\145", 
"\146\141\154\163\145", "\151\156\164", "\142\157\157\154\145\141\156", "\166\157\151\144", 
"\123\164\162\151\156\147", "\156\165\154\154", "\53", "\55", "\52", "\57", "\75\75", "\41\75", "\74", 
"\76", "\74\75", "\76\75", "\75", "\50", "\51", "\173", "\175", "\133", "\135", 
"\73", "\54", "\56", "\130\151\156\165\56\160\162\151\156\164", 
"\130\151\156\165\56\160\162\151\156\164\154\156", "\130\151\156\165\56\160\162\151\156\164\151\156\164", 
"\130\151\156\165\56\162\145\141\144\151\156\164", "\130\151\156\165\56\163\154\145\145\160", 
"\130\151\156\165\56\163\151\147\156\141\154", "\130\151\156\165\56\167\141\151\164", 
"\130\151\156\165\56\163\145\155\143\162\145\141\164\145", "\130\151\156\165\56\163\145\155\163\151\147\156\141\154", 
"\130\151\156\165\56\163\145\155\167\141\151\164", "\130\151\156\165\56\162\145\163\165\155\145", 
"\130\151\156\165\56\163\165\163\160\145\156\144", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\124\150\162\145\141\144", 
"\163\171\156\143\150\162\157\156\151\172\145\144", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   14, 15, 17, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 70)
         {
            jjmatchedKind = 70;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 62)
         {
            jjmatchedKind = 62;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 62)
         {
            jjmatchedKind = 62;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 62)
         {
            jjmatchedKind = 62;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 70 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          error("Illegal token");
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 57 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                    input_stream.backup(1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MiniJavaParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MiniJavaParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 21; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x80ffffffffffffc1L, 0x3bfL, 
};
static final long[] jjtoSkip = {
   0x380000000000003eL, 0x40L, 
};
static final long[] jjtoSpecial = {
   0x3800000000000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x4700000000000000L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[21];
    private final int[] jjstateSet = new int[2 * 21];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
